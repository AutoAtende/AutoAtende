#!/bin/bash

# Defini√ß√£o de vari√°veis para log
LOG_FILE="atualizar_$(date +"%Y%m%d%H%M%S").log"
NODE_MIN_VERSION="20.17.0"
DATE_TIME=$(date +"%Y-%m-%d %H:%M:%S")
REDIS_MIN_VERSION="6.2.0"
REDIS_TARGET_VERSION="7.4.0"

# Fun√ß√£o para registrar logs
log() {
    local message="$1"
    local timestamp=$(date +"%Y-%m-%d %H:%M:%S")
    echo -e "$timestamp - $message" | tee -a "$LOG_FILE"
}

# Fun√ß√£o para obter caminho do arquivo .env
get_env_file() {
    if [ -f "backend/.env" ]; then
        echo "backend/.env"
    elif [ -f ".env" ]; then
        echo ".env"
    elif [ -f "backend/dist/.env" ]; then
        echo "backend/dist/.env"
    elif [ -f "dist/.env" ]; then
        echo "dist/.env"
    else
        echo ""
    fi
}

# Inicializa√ß√£o de vari√°veis
UPDATE_BACKEND=false
UPDATE_FRONTEND=false
UPDATE_NODE_MODULES=false
RUN_MIGRATIONS=false
FORCE_MODE=false
BACKUP_MODE=false
KEEP_SRC=true  # Alterado para true como padr√£o
BRANCH="main"  # Valor padr√£o, mas agora pode ser alterado via par√¢metro
UPDATE_OS_PACKAGES=false
CLEAN_REDIS=false # Nova vari√°vel para controle de limpeza do Redis
ORIGINAL_USER=$(whoami)

# Fun√ß√£o para mostrar ajuda
show_help() {
    log "Exibindo mensagem de ajuda"
    echo "Uso: ./atualizar.sh [op√ß√µes]"
    echo "Op√ß√µes:"
    echo "  -bd              Atualiza o backend"
    echo "  -fd              Atualiza o frontend"
    echo "  -nm              Atualiza node_modules (pode ser usado com -bd e/ou -fd)"
    echo "  -sm              Executa migra√ß√µes do Sequelize (apenas com -bd)"
    echo "  -f               Modo for√ßado (apenas build, sem npm install ou migra√ß√µes)"
    echo "  -bkp             Realiza backup das pastas dist/build antes de atualizar e faz atualiza√ß√£o completa"
    echo "  -nk              N√£o mant√©m as pastas src do frontend e backend (padr√£o agora √© manter)"
    echo "  -cr              Limpa o Redis (chaves Bull e JWT) e reinicia o servi√ßo"
    echo "  -b, --branch     Especifica a branch a ser utilizada (padr√£o: main)"
    echo "  -h               Mostra esta mensagem de ajuda"
    echo ""
    echo "Se nenhuma op√ß√£o for informada, ser√° realizada uma atualiza√ß√£o completa do sistema"
    exit 0
}

# Fun√ß√£o para limpar logs antigos
limpar_logs_antigos() {
    log "üßπ Limpando logs antigos do script atualizar.sh..."
    find . -name "atualizar_*.log" -type f | grep -v "$LOG_FILE" | xargs rm -f 2>/dev/null
    log "‚úÖ Logs antigos removidos com sucesso."
}

# Fun√ß√£o para verificar se um comando est√° dispon√≠vel
comando_existe() {
    command -v "$1" >/dev/null 2>&1
}

# Fun√ß√£o para alternar para usu√°rio root
alternar_para_root() {
    if [ "$ORIGINAL_USER" != "root" ]; then
        log "üîê Alternando para usu√°rio root para realizar opera√ß√µes privilegiadas..."
        # Salvar o diret√≥rio de trabalho atual
        CURRENT_DIR=$(pwd)
        echo "sudo su -c \"cd $CURRENT_DIR && $0 $ORIGINAL_ARGS --continue-as-root\""
        sudo su -c "cd $CURRENT_DIR && $0 $ORIGINAL_ARGS --continue-as-root"
        exit $?
    fi
}

# Fun√ß√£o para voltar ao usu√°rio original
voltar_para_usuario_original() {
    if [ "$ORIGINAL_USER" != "root" ] && [ "$(whoami)" = "root" ]; then
        log "üîê Voltando para o usu√°rio $ORIGINAL_USER..."
        # Salvar o diret√≥rio de trabalho atual
        CURRENT_DIR=$(pwd)
        su - $ORIGINAL_USER -c "cd $CURRENT_DIR && $0 $ORIGINAL_ARGS --continue-as-user"
        exit $?
    fi
}

# Fun√ß√£o para verificar a vers√£o do Node.js
verificar_node_version() {
    log "Verificando vers√£o do Node.js"
    if ! comando_existe node; then
        log "‚ö†Ô∏è Node.js n√£o encontrado no sistema."
        return 1
    fi

    current_version=$(node -v | sed 's/v//g')
    log "Vers√£o atual do Node.js: $current_version"
    
    # Compara√ß√£o de vers√µes
    if [ "$(printf '%s\n' "$NODE_MIN_VERSION" "$current_version" | sort -V | head -n1)" != "$NODE_MIN_VERSION" ]; then
        log "‚ö†Ô∏è A vers√£o do Node.js ($current_version) √© inferior √† m√≠nima requerida ($NODE_MIN_VERSION)."
        return 1
    else
        log "‚úÖ Vers√£o do Node.js compat√≠vel"
        return 0
    fi
}

# Fun√ß√£o para atualizar o Node.js
atualizar_node() {
    log "Iniciando atualiza√ß√£o do Node.js para a vers√£o m√≠nima requerida $NODE_MIN_VERSION"
    
    # Alternar para root para instala√ß√£o de pacotes
    alternar_para_root
    
    # Verificar qual gerenciador de pacotes est√° dispon√≠vel
    if comando_existe apt-get; then
        log "Usando apt-get para atualizar o Node.js"
        
        # Verificar se o curl est√° instalado
        if ! comando_existe curl; then
            log "Instalando curl..."
            apt-get update && apt-get install -y curl
        fi
        
        # Adicionar reposit√≥rio NodeSource
        log "Adicionando reposit√≥rio NodeSource"
        curl -fsSL https://deb.nodesource.com/setup_20.x | bash -
        
        # Instalar Node.js
        log "Instalando Node.js"
        apt-get install -y nodejs
        
    elif comando_existe yum; then
        log "Usando yum para atualizar o Node.js"
        
        # Verificar se o curl est√° instalado
        if ! comando_existe curl; then
            log "Instalando curl..."
            yum install -y curl
        fi
        
        # Adicionar reposit√≥rio NodeSource
        log "Adicionando reposit√≥rio NodeSource"
        curl -fsSL https://rpm.nodesource.com/setup_20.x | bash -
        
        # Instalar Node.js
        log "Instalando Node.js"
        yum install -y nodejs
        
    elif comando_existe brew; then
        log "Usando Homebrew para atualizar o Node.js"
        brew update && brew install node@20
        
    else
        log "‚ùå N√£o foi poss√≠vel determinar o gerenciador de pacotes. Por favor, atualize o Node.js manualmente para a vers√£o $NODE_MIN_VERSION ou superior."
        return 1
    fi
    
    # Verificar se a atualiza√ß√£o foi bem-sucedida
    log "Verificando a vers√£o do Node.js ap√≥s a atualiza√ß√£o"
    new_version=$(node -v | sed 's/v//g')
    log "Nova vers√£o do Node.js: $new_version"
    
    if [ "$(printf '%s\n' "$NODE_MIN_VERSION" "$new_version" | sort -V | head -n1)" != "$NODE_MIN_VERSION" ]; then
        log "‚ùå Falha ao atualizar o Node.js para a vers√£o m√≠nima requerida."
        return 1
    else
        log "‚úÖ Node.js atualizado com sucesso para a vers√£o $new_version"
        return 0
    fi
}

# Fun√ß√£o para verificar e instalar o ffmpeg
verificar_instalar_ffmpeg() {
    log "Verificando instala√ß√£o do ffmpeg"
    if ! comando_existe ffmpeg; then
        log "‚ö†Ô∏è ffmpeg n√£o encontrado no sistema"
        
        read -p "üîÑ O ffmpeg n√£o est√° instalado. Deseja instal√°-lo agora? (s/N): " install_ffmpeg_input
        if [[ "$install_ffmpeg_input" =~ ^[Ss]$ ]]; then
            log "Usu√°rio optou por instalar o ffmpeg"
            
            # Alternar para root para instala√ß√£o de pacotes
            alternar_para_root
            
            # Verificar qual gerenciador de pacotes est√° dispon√≠vel
            if comando_existe apt-get; then
                log "Usando apt-get para instalar ffmpeg"
                apt-get update && apt-get install -y ffmpeg
                
            elif comando_existe yum; then
                log "Usando yum para instalar ffmpeg"
                yum install -y epel-release
                yum install -y ffmpeg ffmpeg-devel
                
            elif comando_existe brew; then
                log "Usando Homebrew para instalar ffmpeg"
                brew update && brew install ffmpeg
                
            else
                log "‚ùå N√£o foi poss√≠vel determinar o gerenciador de pacotes. Por favor, instale o ffmpeg manualmente."
                return 1
            fi
            
            # Verificar se a instala√ß√£o foi bem-sucedida
            if comando_existe ffmpeg; then
                log "‚úÖ ffmpeg instalado com sucesso"
                return 0
            else
                log "‚ùå Falha ao instalar o ffmpeg"
                return 1
            fi
        else
            log "Usu√°rio optou por n√£o instalar o ffmpeg. Continuando sem ffmpeg..."
            return 0
        fi
    else
        log "‚úÖ ffmpeg j√° est√° instalado"
        return 0
    fi
}

# Fun√ß√£o para atualizar pacotes do sistema operacional
atualizar_pacotes_sistema() {
    log "Iniciando atualiza√ß√£o dos pacotes do sistema operacional"
    
    # Alternar para root para atualiza√ß√£o de pacotes
    alternar_para_root
    
    # Verificar qual gerenciador de pacotes est√° dispon√≠vel
    if comando_existe apt-get; then
        log "Usando apt-get para atualizar os pacotes do sistema"
        apt-get update && apt-get upgrade -y
        
    elif comando_existe yum; then
        log "Usando yum para atualizar os pacotes do sistema"
        yum update -y
        
    elif comando_existe dnf; then
        log "Usando dnf para atualizar os pacotes do sistema"
        dnf update -y
        
    elif comando_existe brew; then
        log "Usando Homebrew para atualizar os pacotes do sistema"
        brew update && brew upgrade
        
    else
        log "‚ùå N√£o foi poss√≠vel determinar o gerenciador de pacotes. Por favor, atualize os pacotes do sistema manualmente."
        return 1
    fi
    
    log "‚úÖ Atualiza√ß√£o dos pacotes do sistema conclu√≠da"
    return 0
}

# Fun√ß√£o para configurar as configura√ß√µes do banco de dados
configure_database_settings() {
    log "‚öôÔ∏è Iniciando verifica√ß√£o das configura√ß√µes da empresa id=1 na tabela Settings..."

    # Obter caminho do arquivo .env
    ENV_FILE=$(get_env_file)
    
    if [ -z "$ENV_FILE" ]; then
        log "‚ùå Arquivo .env n√£o encontrado em nenhum local padr√£o."
        log "üìÇ Diret√≥rio atual: $(pwd)"
        log "üìÇ Listando arquivos na pasta backend: $(ls -la backend/ 2>/dev/null || echo 'N√£o acess√≠vel')"
        return 1
    fi
    
    log "üìÑ Carregando vari√°veis de ambiente do arquivo $ENV_FILE"
    
    # Extrair vari√°veis do banco de dados do arquivo .env
    DB_HOST=$(grep -E "^DB_HOST=" "$ENV_FILE" | cut -d '=' -f2)
    DB_PORT=$(grep -E "^DB_PORT=" "$ENV_FILE" | cut -d '=' -f2)
    DB_USER=$(grep -E "^DB_USER=" "$ENV_FILE" | cut -d '=' -f2)
    DB_PASS=$(grep -E "^DB_PASS=" "$ENV_FILE" | cut -d '=' -f2)
    DB_NAME=$(grep -E "^DB_NAME=" "$ENV_FILE" | cut -d '=' -f2)

    # Configura√ß√µes padr√£o
    DB_HOST=${DB_HOST:-localhost}
    DB_PORT=${DB_PORT:-5432}
    DB_USER=${DB_USER:-postgres}
    DB_PASS=${DB_PASS:-}

    if [ -z "$DB_NAME" ]; then
        log "‚ùå Nome do banco de dados n√£o configurado no .env"
        return 1
    fi
    
    log "üîç Usando configura√ß√µes: DB_HOST=$DB_HOST, DB_PORT=$DB_PORT, DB_USER=$DB_USER, DB_NAME=$DB_NAME"

    # ID da empresa
    COMPANY_ID=1

    # Array de configura√ß√µes (chave=valor)
    declare -A SETTINGS=(
        ["userRating"]="disabled"
        ["scheduleType"]="company"
        ["CheckMsgIsGroup"]="enabled"
        ["sendGreetingAccepted"]="disabled"
        ["sendMsgTransfTicket"]="disabled"
        ["chatBotType"]="text"
        ["allowSignup"]="enabled"
        ["sendGreetingMessageOneQueues"]="disabled"
        ["callSuport"]="disabled"
        ["displayContactInfo"]="enabled"
        ["trialExpiration"]="7"
        ["sendEmailWhenRegister"]="enabled"
        ["sendMessageWhenRegister"]="enabled"
        ["smtpauth"]="disabled"
        ["usersmtpauth"]="disabled"
        ["clientsecretsmtpauth"]=""
        ["smtpport"]=""
        ["wasuport"]=""
        ["msgsuport"]=""
        ["openaiModel"]="gpt-4"
        ["downloadLimit"]="64"
        ["useOneTicketPerConnection"]="enabled"
        ["enableTicketValueAndSku"]="enabled"
        ["enableReasonWhenCloseTicket"]="disabled"
        ["quickMessages"]="company"
        ["sendQueuePosition"]="disabled"
        ["settingsUserRandom"]="disabled"
        ["displayBusinessInfo"]="disabled"
        ["initialPage"]="login"
        ["enableUPSix"]="disabled"
        ["enableUPSixWebphone"]="disabled"
        ["enableUPSixNotifications"]="disabled"
        ["enableOfficialWhatsapp"]="disabled"
        ["enableSaveCommonContacts"]="disabled"
        ["displayProfileImages"]="disabled"
        ["enableQueueWhenCloseTicket"]="disabled"
        ["queueWhenClosingTicket"]="disabled"
        ["tagsWhenClosingTicket"]="disabled"
        ["enableTagsWhenCloseTicket"]="disabled"
        ["enableMetaPixel"]="enabled"
        ["metaPixelId"]=""
        ["enableSatisfactionSurvey"]="disabled"
    )

    # Fun√ß√£o para executar consultas SQL
    execute_query() {
        local query="$1"
        PGPASSWORD=$DB_PASS psql -h $DB_HOST -p $DB_PORT -U $DB_USER -d $DB_NAME -c "$query"
    }

    # Verifica e insere configura√ß√µes ausentes
    for key in "${!SETTINGS[@]}"; do
        value="${SETTINGS[$key]}"
        
        # Verifica se a configura√ß√£o j√° existe
        result=$(execute_query "SELECT \"value\" FROM \"Settings\" WHERE \"companyId\" = $COMPANY_ID AND \"key\" = '$key';")
        
        if [[ $result == *"(0 rows)"* ]]; then
            # Configura√ß√£o n√£o existe, insere
            log "‚ûï Inserindo configura√ß√£o: $key = $value"
            execute_query "INSERT INTO \"Settings\" (\"companyId\", \"key\", \"value\", \"createdAt\", \"updatedAt\") VALUES ($COMPANY_ID, '$key', '$value', NOW(), NOW());"
        else
            # Configura√ß√£o existe, verifica se precisa atualizar
            current_value=$(echo "$result" | grep -v "value" | grep -v "row" | grep -v "^$" | xargs)
            
            if [[ "$key" == "chatBotType" && ("$current_value" == "list" || "$current_value" == "button") ]]; then
                log "üîÑ Atualizando configura√ß√£o $key de $current_value para $value"
                execute_query "UPDATE \"Settings\" SET \"value\" = '$value', \"updatedAt\" = NOW() WHERE \"companyId\" = $COMPANY_ID AND \"key\" = '$key';"
            elif [[ "$key" == "useOneTicketPerConnection" && "$current_value" == "disabled" ]]; then
                log "üîÑ Atualizando configura√ß√£o $key de $current_value para $value"
                execute_query "UPDATE \"Settings\" SET \"value\" = '$value', \"updatedAt\" = NOW() WHERE \"companyId\" = $COMPANY_ID AND \"key\" = '$key';"
            else
                log "‚úÖ Configura√ß√£o existente: $key = $current_value (sem altera√ß√µes necess√°rias)"
            fi
        fi
    done

    log "‚úÖ Configura√ß√µes do banco de dados atualizadas com sucesso!"
}

# Fun√ß√£o para limpar o Redis
clean_redis() {
    log "üîÑ Iniciando limpeza do Redis..."

    # Obter caminho do arquivo .env
    ENV_FILE=$(get_env_file)
    
    if [ -z "$ENV_FILE" ]; then
        log "‚ùå Arquivo .env n√£o encontrado em nenhum local padr√£o."
        log "üìÇ Diret√≥rio atual: $(pwd)"
        log "üìÇ Listando arquivos na pasta backend: $(ls -la backend/ 2>/dev/null || echo 'N√£o acess√≠vel')"
        return 1
    fi
    
    log "üìÑ Carregando vari√°veis de ambiente do arquivo $ENV_FILE"
    
    # Extrair vari√°veis do Redis do arquivo .env
    REDIS_PASSWORD=$(grep -E "^REDIS_PASSWORD=" "$ENV_FILE" | cut -d '=' -f2)
    
    # Obter o nome da pasta atual (inst√¢ncia atual)
    CURRENT_INSTANCE_NAME=$(basename "$(pwd)")
    log "üîç Buscando container Redis para a inst√¢ncia: $CURRENT_INSTANCE_NAME"

    # Nome esperado do container Redis
    REDIS_CONTAINER_NAME="redis-${CURRENT_INSTANCE_NAME}"
    log "üîç Nome esperado do container Redis: $REDIS_CONTAINER_NAME"

    # Verificar se o Docker est√° dispon√≠vel
    if command -v docker >/dev/null 2>&1; then
        # Verificar se o container espec√≠fico existe e est√° rodando
        CONTAINER_ID=$(docker ps -q --filter "name=$REDIS_CONTAINER_NAME" --filter "status=running")
        
        if [ -n "$CONTAINER_ID" ]; then
            log "‚úÖ Container Redis encontrado: $REDIS_CONTAINER_NAME ($CONTAINER_ID)"
            
            # Configurar comando Redis CLI baseado na senha (se existir)
            AUTH_PARAM=""
            if [ -n "$REDIS_PASSWORD" ]; then
                AUTH_PARAM="-a $REDIS_PASSWORD"
                log "üîê Usando autentica√ß√£o Redis com senha configurada"
            fi
            
            # Limpar chaves Bull no Redis via Docker
            log "üßπ Limpando chaves Bull..."
            docker exec $CONTAINER_ID sh -c "redis-cli $AUTH_PARAM keys 'bull:*' | xargs -r redis-cli $AUTH_PARAM del"
            
            # Limpar chaves JWT no Redis via Docker
            log "üßπ Limpando chaves JWT..."
            docker exec $CONTAINER_ID sh -c "redis-cli $AUTH_PARAM keys 'jwt:*' | xargs -r redis-cli $AUTH_PARAM del"
            
            # Limpar chaves de sess√£o no Redis via Docker
            log "üßπ Limpando chaves de sess√£o..."
            docker exec $CONTAINER_ID sh -c "redis-cli $AUTH_PARAM keys 'sess:*' | xargs -r redis-cli $AUTH_PARAM del"
            
            log "üîÑ Reiniciando container Redis $REDIS_CONTAINER_NAME..."
            docker restart $CONTAINER_ID
            log "‚úÖ Limpeza do Redis conclu√≠da para a inst√¢ncia $CURRENT_INSTANCE_NAME"
            return 0
        else
            log "‚ö†Ô∏è Container Redis espec√≠fico '$REDIS_CONTAINER_NAME' n√£o encontrado ou n√£o est√° rodando."
            
            # Perguntar se quer procurar outros containers Redis
            read -p "üîÑ Procurar por outros containers Redis dispon√≠veis? (s/N): " find_other_redis
            if [[ "$find_other_redis" =~ ^[Ss]$ ]]; then
                OTHER_REDIS_CONTAINERS=$(docker ps --format "{{.Names}}" --filter "name=redis" --filter "status=running")
                
                if [ -n "$OTHER_REDIS_CONTAINERS" ]; then
                    log "üîç Containers Redis dispon√≠veis:"
                    echo "$OTHER_REDIS_CONTAINERS" | nl
                    
                    read -p "üîÑ Digite o n√∫mero do container Redis que deseja limpar (ou 0 para cancelar): " container_num
                    
                    if [ "$container_num" -gt 0 ] 2>/dev/null; then
                        SELECTED_CONTAINER=$(echo "$OTHER_REDIS_CONTAINERS" | sed -n "${container_num}p")
                        
                        if [ -n "$SELECTED_CONTAINER" ]; then
                            CONTAINER_ID=$(docker ps -q --filter "name=$SELECTED_CONTAINER" --filter "status=running")
                            log "üßπ Limpando Redis no container selecionado: $SELECTED_CONTAINER"
                            
                            # Configurar comando Redis CLI baseado na senha (se existir)
                            AUTH_PARAM=""
                            if [ -n "$REDIS_PASSWORD" ]; then
                                AUTH_PARAM="-a $REDIS_PASSWORD"
                                log "üîê Usando autentica√ß√£o Redis com senha configurada"
                            fi
                            
                            # Limpar chaves Bull no Redis via Docker
                            log "üßπ Limpando chaves Bull..."
                            docker exec $CONTAINER_ID sh -c "redis-cli $AUTH_PARAM keys 'bull:*' | xargs -r redis-cli $AUTH_PARAM del"
                            
                            # Limpar chaves JWT no Redis via Docker
                            log "üßπ Limpando chaves JWT..."
                            docker exec $CONTAINER_ID sh -c "redis-cli $AUTH_PARAM keys 'jwt:*' | xargs -r redis-cli $AUTH_PARAM del"
                            
                            # Limpar chaves de sess√£o no Redis via Docker
                            log "üßπ Limpando chaves de sess√£o..."
                            docker exec $CONTAINER_ID sh -c "redis-cli $AUTH_PARAM keys 'sess:*' | xargs -r redis-cli $AUTH_PARAM del"
                            
                            log "üîÑ Reiniciando container Redis $SELECTED_CONTAINER..."
                            docker restart $CONTAINER_ID
                            log "‚úÖ Limpeza do Redis conclu√≠da"
                            return 0
                        else
                            log "‚ùå Sele√ß√£o inv√°lida."
                        fi
                    else
                        log "‚è≠Ô∏è Limpeza do Redis cancelada pelo usu√°rio."
                    fi
                else
                    log "‚ùå Nenhum container Redis encontrado no sistema."
                fi
            else
                log "‚è≠Ô∏è Procura por outros containers Redis ignorada pelo usu√°rio."
            fi
        fi
    else
        log "‚ö†Ô∏è Docker n√£o est√° dispon√≠vel. Verificando Redis local..."
    fi

    # Tentar via redis-cli local se Docker n√£o estiver dispon√≠vel ou op√ß√µes acima falharem
    if command -v redis-cli >/dev/null 2>&1; then
        log "üîç Tentando limpar Redis local..."
        
        # Extrair configura√ß√µes do Redis do arquivo .env
        REDIS_HOST=$(grep -E "^REDIS_HOST=" "$ENV_FILE" | cut -d '=' -f2)
        REDIS_PORT=$(grep -E "^REDIS_PORT=" "$ENV_FILE" | cut -d '=' -f2)
        REDIS_DB=$(grep -E "^REDIS_DB=" "$ENV_FILE" | cut -d '=' -f2)

        # Configura√ß√µes padr√£o
        REDIS_HOST=${REDIS_HOST:-127.0.0.1}
        REDIS_PORT=${REDIS_PORT:-6379}
        REDIS_DB=${REDIS_DB:-0}
        
        log "üîç Usando configura√ß√µes Redis local: HOST=$REDIS_HOST, PORT=$REDIS_PORT, DB=$REDIS_DB"
        
        # Preparar op√ß√µes de autentica√ß√£o
        AUTH_OPTS=""
        if [ -n "$REDIS_PASSWORD" ]; then
            AUTH_OPTS="-a $REDIS_PASSWORD"
            log "üîê Usando autentica√ß√£o Redis com senha configurada"
        fi
        if [ -n "$REDIS_DB" ] && [ "$REDIS_DB" != "0" ]; then
            AUTH_OPTS="$AUTH_OPTS -n $REDIS_DB"
        fi
        
        # Verificar se consegue se conectar ao Redis
        if redis-cli -h "$REDIS_HOST" -p "$REDIS_PORT" $AUTH_OPTS ping >/dev/null 2>&1; then
            log "‚úÖ Conectado ao Redis local. Executando limpeza..."
            
            # Limpar chaves Bull
            redis-cli -h "$REDIS_HOST" -p "$REDIS_PORT" $AUTH_OPTS --scan --pattern "bull:*" | \
            xargs -r redis-cli -h "$REDIS_HOST" -p "$REDIS_PORT" $AUTH_OPTS del
            
            # Limpar chaves JWT
            redis-cli -h "$REDIS_HOST" -p "$REDIS_PORT" $AUTH_OPTS --scan --pattern "jwt:*" | \
            xargs -r redis-cli -h "$REDIS_HOST" -p "$REDIS_PORT" $AUTH_OPTS del
            
            # Limpar chaves de sess√£o
            redis-cli -h "$REDIS_HOST" -p "$REDIS_PORT" $AUTH_OPTS --scan --pattern "sess:*" | \
            xargs -r redis-cli -h "$REDIS_HOST" -p "$REDIS_PORT" $AUTH_OPTS del
            
            log "‚úÖ Redis local limpo com sucesso!"
            
            # Tentar reiniciar o servi√ßo Redis local se necess√°rio
            log "üîÑ Tentando reiniciar servi√ßo Redis local..."
            if command -v systemctl >/dev/null 2>&1 && systemctl is-active --quiet redis-server; then
                sudo systemctl restart redis-server
                log "‚úÖ Servi√ßo Redis reiniciado via systemctl"
            elif command -v systemctl >/dev/null 2>&1 && systemctl is-active --quiet redis; then
                sudo systemctl restart redis
                log "‚úÖ Servi√ßo Redis reiniciado via systemctl"
            elif command -v service >/dev/null 2>&1; then
                sudo service redis-server restart 2>/dev/null || sudo service redis restart 2>/dev/null
                log "‚úÖ Servi√ßo Redis reiniciado via service"
            else
                log "‚ö†Ô∏è N√£o foi poss√≠vel reiniciar automaticamente o servi√ßo Redis local. Considere reinici√°-lo manualmente."
            fi
            
            return 0
        else
            log "‚ùå N√£o foi poss√≠vel conectar ao Redis local."
        fi
    else
        log "‚ùå redis-cli n√£o est√° dispon√≠vel no sistema."
    fi

    log "‚ùå N√£o foi poss√≠vel limpar o Redis. Verifique suas configura√ß√µes no arquivo .env e a disponibilidade do servi√ßo Redis."
    return 1
}

verificar_e_atualizar_redis() {
    log "üîç Verificando vers√£o do Redis..."
    local redis_version=""
    local redis_service=""
    local redis_connection_error=false
    local redis_reinstall=false

    # Obter caminho do arquivo .env
    ENV_FILE=$(get_env_file)
    
    if [ -z "$ENV_FILE" ]; then
        log "‚ùå Arquivo .env n√£o encontrado em nenhum local padr√£o."
        log "üìÇ Diret√≥rio atual: $(pwd)"
        log "üìÇ Listando arquivos na pasta backend: $(ls -la backend/ 2>/dev/null || echo 'N√£o acess√≠vel')"
        return 1
    fi
    
    log "üìÑ Carregando vari√°veis de ambiente do arquivo $ENV_FILE"
    
    # Extrair vari√°veis do Redis do arquivo .env
    REDIS_HOST=$(grep -E "^REDIS_HOST=" "$ENV_FILE" | cut -d '=' -f2)
    REDIS_PORT=$(grep -E "^REDIS_PORT=" "$ENV_FILE" | cut -d '=' -f2)
    REDIS_PASSWORD=$(grep -E "^REDIS_PASSWORD=" "$ENV_FILE" | cut -d '=' -f2)
    REDIS_DB=$(grep -E "^REDIS_DB=" "$ENV_FILE" | cut -d '=' -f2)

    # Configura√ß√µes padr√£o
    REDIS_HOST=${REDIS_HOST:-127.0.0.1}
    REDIS_PORT=${REDIS_PORT:-6379}
    REDIS_DB=${REDIS_DB:-0}
    
    log "üîç Usando configura√ß√µes Redis: HOST=$REDIS_HOST, PORT=$REDIS_PORT, DB=$REDIS_DB"
    
    # Montar op√ß√µes de autentica√ß√£o para comandos Redis
    AUTH_OPTS=""
    if [ -n "$REDIS_PASSWORD" ]; then
        AUTH_OPTS="-a $REDIS_PASSWORD"
        log "üîê Usando autentica√ß√£o Redis com senha configurada"
    fi
    
    # Adicionar op√ß√£o de DB se n√£o for o padr√£o
    if [ -n "$REDIS_DB" ] && [ "$REDIS_DB" != "0" ]; then
        AUTH_OPTS="$AUTH_OPTS -n $REDIS_DB"
    fi

    # Verificar qual servi√ßo Redis est√° sendo usado
    if systemctl is-active --quiet redis-server 2>/dev/null; then
        redis_service="redis-server"
        log "‚úÖ Servi√ßo redis-server est√° ativo"
    elif systemctl is-active --quiet redis 2>/dev/null; then
        redis_service="redis"
        log "‚úÖ Servi√ßo redis est√° ativo"
    else
        log "‚ö†Ô∏è Nenhum servi√ßo Redis ativo encontrado"
    fi

    # Verificar vers√£o do Redis instalado no servidor
    if command -v redis-cli >/dev/null 2>&1; then
        # Testar conex√£o com o Redis antes
        if redis-cli -h "$REDIS_HOST" -p "$REDIS_PORT" $AUTH_OPTS ping >/dev/null 2>&1; then
            redis_version=$(redis-cli -h "$REDIS_HOST" -p "$REDIS_PORT" $AUTH_OPTS info | grep -oP 'redis_version:\K\d+\.\d+\.\d+' || echo "")
            if [ -n "$redis_version" ]; then
                log "‚úÖ Redis instalado no servidor. Vers√£o: $redis_version"
            else
                # Tentar m√©todo alternativo
                redis_version=$(redis-cli --version | grep -oP 'redis-cli\s+\K\d+\.\d+\.\d+' || echo "")
                if [ -n "$redis_version" ]; then
                    log "‚úÖ Redis-cli encontrado. Vers√£o: $redis_version"
                else
                    log "‚ö†Ô∏è Redis-cli encontrado, mas n√£o foi poss√≠vel determinar a vers√£o"
                fi
            fi
        else
            log "‚ö†Ô∏è N√£o foi poss√≠vel conectar ao Redis usando as credenciais do .env"
            redis_connection_error=true
            
            # Tentar obter a vers√£o sem autentica√ß√£o para diagn√≥stico
            redis_version=$(redis-cli --version | grep -oP 'redis-cli\s+\K\d+\.\d+\.\d+' || echo "")
            if [ -n "$redis_version" ]; then
                log "‚úÖ Redis-cli encontrado. Vers√£o: $redis_version"
            fi
        fi
    fi

    # Verificar se precisamos reinstalar o Redis devido a problemas de conex√£o
    if [ "$redis_connection_error" = true ]; then
        if [ -n "$redis_service" ]; then
            log "üîÑ Redis instalado (vers√£o $redis_version), mas com problemas de autentica√ß√£o"
            read -p "üîÑ Deseja reinstalar o Redis e configurar com a senha correta? (s/N): " reinstall_redis
            if [[ "$reinstall_redis" =~ ^[Ss]$ ]]; then
                redis_reinstall=true
                log "üöÄ Usu√°rio optou por reinstalar o Redis"
            else
                log "‚è≠Ô∏è Reinstala√ß√£o do Redis cancelada pelo usu√°rio"
            fi
        else
            log "‚ö†Ô∏è Redis n√£o est√° funcionando corretamente"
            read -p "üîÑ Deseja reinstalar o Redis? (s/N): " reinstall_redis
            if [[ "$reinstall_redis" =~ ^[Ss]$ ]]; then
                redis_reinstall=true
                log "üöÄ Usu√°rio optou por reinstalar o Redis"
            else
                log "‚è≠Ô∏è Reinstala√ß√£o do Redis cancelada pelo usu√°rio"
            fi
        fi
    elif [ -z "$redis_version" ]; then
        log "‚ö†Ô∏è Redis n√£o encontrado ou vers√£o n√£o detectada"
        read -p "üîÑ Redis n√£o encontrado. Deseja instalar Redis $REDIS_TARGET_VERSION? (s/N): " install_redis
        if [[ "$install_redis" =~ ^[Ss]$ ]]; then
            redis_reinstall=true
            log "üöÄ Iniciando instala√ß√£o do Redis $REDIS_TARGET_VERSION..."
        else
            log "‚è≠Ô∏è Instala√ß√£o do Redis cancelada pelo usu√°rio"
            return 1
        fi
    else
        log "‚úÖ Vers√£o atual do Redis: $redis_version"
        
        # Comparar vers√µes
        if [ "$(printf '%s\n' "$REDIS_MIN_VERSION" "$redis_version" | sort -V | head -n1)" != "$REDIS_MIN_VERSION" ]; then
            log "‚ö†Ô∏è Vers√£o do Redis ($redis_version) √© inferior √† m√≠nima requerida ($REDIS_MIN_VERSION)"
            
            read -p "üîÑ Deseja atualizar para o Redis $REDIS_TARGET_VERSION? (s/N): " update_redis
            if [[ "$update_redis" =~ ^[Ss]$ ]]; then
                redis_reinstall=true
                log "üöÄ Iniciando atualiza√ß√£o do Redis para $REDIS_TARGET_VERSION..."
            else
                log "‚è≠Ô∏è Atualiza√ß√£o do Redis cancelada pelo usu√°rio"
                return 0
            fi
        else
            log "‚úÖ Vers√£o do Redis j√° satisfat√≥ria ($redis_version)"
            
            # Se a vers√£o est√° OK mas temos problemas de autentica√ß√£o, perguntar se quer reconfigurar
            if [ "$redis_connection_error" = true ]; then
                read -p "üîÑ Deseja reconfigurar o Redis com a senha correta? (s/N): " reconfigure_redis
                if [[ "$reconfigure_redis" =~ ^[Ss]$ ]]; then
                    log "üîÑ Reconfigurando o Redis com a senha do arquivo .env"
                    redis_reinstall=true
                else
                    log "‚è≠Ô∏è Reconfigura√ß√£o do Redis cancelada pelo usu√°rio"
                    return 0
                fi
            else
                return 0
            fi
        fi
    fi
    
    # Realizar reinstala√ß√£o/reconfigura√ß√£o se necess√°rio
    if [ "$redis_reinstall" = true ]; then
        # Parar o servi√ßo Redis atual
        if [ -n "$redis_service" ]; then
            log "üõë Parando servi√ßo $redis_service..."
            if [ "$(whoami)" != "root" ]; then
                sudo systemctl stop $redis_service
            else
                systemctl stop $redis_service
            fi
        fi
        
        # Backup da configura√ß√£o atual do Redis
        log "üì¶ Criando backup da configura√ß√£o do Redis..."
        local redis_conf_backup="/tmp/redis_conf_backup_$(date +%Y%m%d%H%M%S)"
        mkdir -p "$redis_conf_backup"
        
        # Identificar local dos arquivos de configura√ß√£o
        if [ -f "/etc/redis/redis.conf" ]; then
            if [ "$(whoami)" != "root" ]; then
                sudo cp "/etc/redis/redis.conf" "$redis_conf_backup/"
            else
                cp "/etc/redis/redis.conf" "$redis_conf_backup/"
            fi
            log "‚úÖ Backup de /etc/redis/redis.conf criado"
        elif [ -f "/etc/redis.conf" ]; then
            if [ "$(whoami)" != "root" ]; then
                sudo cp "/etc/redis.conf" "$redis_conf_backup/"
            else
                cp "/etc/redis.conf" "$redis_conf_backup/"
            fi
            log "‚úÖ Backup de /etc/redis.conf criado"
        fi
        
        # Desinstalar o Redis atual
        log "üßπ Removendo instala√ß√£o atual do Redis..."
        if [ "$(whoami)" != "root" ]; then
            if command -v apt-get >/dev/null 2>&1; then
                sudo apt-get remove -y redis-server redis redis-tools
                sudo apt-get autoremove -y
            elif command -v yum >/dev/null 2>&1; then
                sudo yum remove -y redis
            elif command -v dnf >/dev/null 2>&1; then
                sudo dnf remove -y redis
            fi
        else
            if command -v apt-get >/dev/null 2>&1; then
                apt-get remove -y redis-server redis redis-tools
                apt-get autoremove -y
            elif command -v yum >/dev/null 2>&1; then
                yum remove -y redis
            elif command -v dnf >/dev/null 2>&1; then
                dnf remove -y redis
            fi
        fi
        
        log "üîÑ Instalando Redis $REDIS_TARGET_VERSION..."
        
        # Construir comando de instala√ß√£o
        local install_cmd=""
        
        if command -v apt-get >/dev/null 2>&1; then
            install_cmd="apt-get update && "
            install_cmd+="apt-get install -y software-properties-common && "
            install_cmd+="add-apt-repository ppa:redislabs/redis -y && "
            install_cmd+="apt-get update && "
            install_cmd+="apt-get install -y redis-server && "
            
            # Configurar senha
            if [ -n "$REDIS_PASSWORD" ]; then
                install_cmd+="if [ -f \"/etc/redis/redis.conf\" ]; then "
                install_cmd+="sed -i \"s/^# requirepass.*$/requirepass $REDIS_PASSWORD/\" /etc/redis/redis.conf && "
                install_cmd+="sed -i \"s/^requirepass.*$/requirepass $REDIS_PASSWORD/\" /etc/redis/redis.conf; "
                install_cmd+="else "
                install_cmd+="echo \"‚ö†Ô∏è Arquivo de configura√ß√£o /etc/redis/redis.conf n√£o encontrado\"; "
                install_cmd+="fi && "
            fi
            
            install_cmd+="systemctl enable redis-server && "
            install_cmd+="systemctl restart redis-server"
            
        elif command -v yum >/dev/null 2>&1; then
            install_cmd="yum install -y epel-release && "
            install_cmd+="yum install -y redis && "
            
            # Configurar senha
            if [ -n "$REDIS_PASSWORD" ]; then
                install_cmd+="if [ -f \"/etc/redis.conf\" ]; then "
                install_cmd+="sed -i \"s/^# requirepass.*$/requirepass $REDIS_PASSWORD/\" /etc/redis.conf && "
                install_cmd+="sed -i \"s/^requirepass.*$/requirepass $REDIS_PASSWORD/\" /etc/redis.conf; "
                install_cmd+="else "
                install_cmd+="echo \"‚ö†Ô∏è Arquivo de configura√ß√£o /etc/redis.conf n√£o encontrado\"; "
                install_cmd+="fi && "
            fi
            
            install_cmd+="systemctl enable redis && "
            install_cmd+="systemctl restart redis"
            
        elif command -v dnf >/dev/null 2>&1; then
            install_cmd="dnf install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm && "
            install_cmd+="dnf module reset redis -y && "
            install_cmd+="dnf module enable redis:7.4 -y && "
            install_cmd+="dnf install -y redis && "
            
            # Configurar senha
            if [ -n "$REDIS_PASSWORD" ]; then
                install_cmd+="if [ -f \"/etc/redis.conf\" ]; then "
                install_cmd+="sed -i \"s/^# requirepass.*$/requirepass $REDIS_PASSWORD/\" /etc/redis.conf && "
                install_cmd+="sed -i \"s/^requirepass.*$/requirepass $REDIS_PASSWORD/\" /etc/redis.conf; "
                install_cmd+="else "
                install_cmd+="echo \"‚ö†Ô∏è Arquivo de configura√ß√£o /etc/redis.conf n√£o encontrado\"; "
                install_cmd+="fi && "
            fi
            
            install_cmd+="systemctl enable redis && "
            install_cmd+="systemctl restart redis"
        else
            log "‚ùå Gerenciador de pacotes n√£o suportado"
            return 1
        fi
        
        # Executar instala√ß√£o com sudo se necess√°rio
        if [ "$(whoami)" != "root" ]; then
            log "üîê Executando instala√ß√£o do Redis como root..."
            sudo bash -c "$install_cmd"
        else
            log "üîê Executando instala√ß√£o do Redis..."
            bash -c "$install_cmd"
        fi
        
        # Verificar se a reinstala√ß√£o foi bem-sucedida
        log "üîç Verificando a instala√ß√£o do Redis..."
        sleep 3 # Aguardar o servi√ßo iniciar
        
        # Verificar se o servi√ßo est√° rodando
        local new_service=""
        if systemctl is-active --quiet redis-server; then
            new_service="redis-server"
            log "‚úÖ Servi√ßo redis-server est√° rodando"
        elif systemctl is-active --quiet redis; then
            new_service="redis"
            log "‚úÖ Servi√ßo redis est√° rodando"
        else
            log "‚ö†Ô∏è Servi√ßo Redis n√£o est√° rodando. Tentando iniciar..."
            if [ "$(whoami)" != "root" ]; then
                sudo systemctl start redis-server 2>/dev/null || sudo systemctl start redis 2>/dev/null
            else
                systemctl start redis-server 2>/dev/null || systemctl start redis 2>/dev/null
            fi
            
            sleep 2
            if systemctl is-active --quiet redis-server; then
                new_service="redis-server"
                log "‚úÖ Servi√ßo redis-server iniciado com sucesso"
            elif systemctl is-active --quiet redis; then
                new_service="redis"
                log "‚úÖ Servi√ßo redis iniciado com sucesso"
            else
                log "‚ùå N√£o foi poss√≠vel iniciar o servi√ßo Redis"
                return 1
            fi
        fi
        
        # Testar conex√£o com o Redis
        if command -v redis-cli >/dev/null 2>&1; then
            if redis-cli -h "$REDIS_HOST" -p "$REDIS_PORT" $AUTH_OPTS ping >/dev/null 2>&1; then
                log "‚úÖ Conex√£o com o Redis estabelecida com sucesso"
                local new_version=$(redis-cli -h "$REDIS_HOST" -p "$REDIS_PORT" $AUTH_OPTS info | grep -oP 'redis_version:\K\d+\.\d+\.\d+' || echo "")
                
                if [ -n "$new_version" ]; then
                    log "‚úÖ Redis instalado/reconfigurado com sucesso. Vers√£o: $new_version"
                    return 0
                else
                    log "‚ö†Ô∏è Redis instalado, mas n√£o foi poss√≠vel obter a vers√£o"
                    return 0
                fi
            else
                log "‚ùå Redis instalado, mas n√£o foi poss√≠vel conectar com as credenciais fornecidas"
                log "‚ö†Ô∏è Verifique se a senha no arquivo .env est√° configurada corretamente"
                
                # Tentar configurar a senha novamente
                log "üîÑ Tentando configurar a senha novamente..."
                
                if [ -n "$REDIS_PASSWORD" ]; then
                    local redis_conf=""
                    if [ -f "/etc/redis/redis.conf" ]; then
                        redis_conf="/etc/redis/redis.conf"
                    elif [ -f "/etc/redis.conf" ]; then
                        redis_conf="/etc/redis.conf"
                    fi
                    
                    if [ -n "$redis_conf" ]; then
                        log "üìÑ Configurando senha no arquivo $redis_conf"
                        if [ "$(whoami)" != "root" ]; then
                            sudo sed -i "s/^# requirepass.*$/requirepass $REDIS_PASSWORD/" "$redis_conf"
                            sudo sed -i "s/^requirepass.*$/requirepass $REDIS_PASSWORD/" "$redis_conf"
                        else
                            sed -i "s/^# requirepass.*$/requirepass $REDIS_PASSWORD/" "$redis_conf"
                            sed -i "s/^requirepass.*$/requirepass $REDIS_PASSWORD/" "$redis_conf"
                        fi
                        
                        # Reiniciar o servi√ßo Redis
                        log "üîÑ Reiniciando servi√ßo $new_service..."
                        if [ "$(whoami)" != "root" ]; then
                            sudo systemctl restart $new_service
                        else
                            systemctl restart $new_service
                        fi
                        
                        sleep 2
                        if redis-cli -h "$REDIS_HOST" -p "$REDIS_PORT" $AUTH_OPTS ping >/dev/null 2>&1; then
                            log "‚úÖ Conex√£o com o Redis estabelecida ap√≥s reconfigura√ß√£o da senha"
                            return 0
                        else
                            log "‚ùå Ainda n√£o foi poss√≠vel conectar ao Redis"
                            return 1
                        fi
                    else
                        log "‚ùå N√£o foi poss√≠vel encontrar o arquivo de configura√ß√£o do Redis"
                        return 1
                    fi
                else
                    log "‚ö†Ô∏è Nenhuma senha definida no arquivo .env"
                    return 1
                fi
            fi
        else
            log "‚ùå redis-cli n√£o encontrado ap√≥s a instala√ß√£o"
            return 1
        fi
    fi
    
    return 0
}

# Guardar os argumentos originais
ORIGINAL_ARGS="$@"

# Flag para controlar a execu√ß√£o como root
CONTINUE_AS_ROOT=false
CONTINUE_AS_USER=false

# Verificar se est√° executando como continua√ß√£o ap√≥s eleva√ß√£o de privil√©gios
for arg in "$@"; do
    if [ "$arg" = "--continue-as-root" ]; then
        CONTINUE_AS_ROOT=true
    fi
    if [ "$arg" = "--continue-as-user" ]; then
        CONTINUE_AS_USER=true
    fi
done

# Se estiver executando como root ap√≥s eleva√ß√£o, executar apenas as tarefas privilegiadas
if $CONTINUE_AS_ROOT; then
    log "üîê Executando tarefas privilegiadas como root"
    
    # Atualizar pacotes do sistema operacional
    if $UPDATE_OS_PACKAGES; then
        atualizar_pacotes_sistema
    fi
    
    # Instalar ffmpeg se necess√°rio
    if [ "$INSTALL_FFMPEG" = "true" ]; then
        comando_existe ffmpeg || {
            log "Instalando ffmpeg como root..."
            if comando_existe apt-get; then
                apt-get update && apt-get install -y ffmpeg
            elif comando_existe yum; then
                yum install -y epel-release
                yum install -y ffmpeg ffmpeg-devel
            elif comando_existe brew; then
                brew update && brew install ffmpeg
            fi
        }
    fi
    
    # Instalar Node.js se necess√°rio
    if [ "$UPDATE_NODE" = "true" ]; then
        log "Atualizando Node.js como root..."
        if comando_existe apt-get; then
            comando_existe curl || apt-get install -y curl
            curl -fsSL https://deb.nodesource.com/setup_20.x | bash -
            apt-get install -y nodejs
        elif comando_existe yum; then
            comando_existe curl || yum install -y curl
            curl -fsSL https://rpm.nodesource.com/setup_20.x | bash -
            yum install -y nodejs
        elif comando_existe brew; then
            brew update && brew install node@20
        fi
    fi
    
    # Reiniciar Redis como root se necess√°rio
    if [ "$RESTART_REDIS_AS_ROOT" = "true" ]; then
        log "Reiniciando Redis como root..."
        if [ "$REDIS_CONTAINER_ID" != "" ]; then
            docker restart $REDIS_CONTAINER_ID
            log "‚úÖ Container Redis reiniciado: $REDIS_CONTAINER_ID"
        else
            if command -v systemctl >/dev/null 2>&1; then
                systemctl restart redis-server || systemctl restart redis
                log "‚úÖ Servi√ßo Redis do sistema operacional reiniciado"
            elif command -v service >/dev/null 2>&1; then
                service redis-server restart || service redis restart
                log "‚úÖ Servi√ßo Redis do sistema operacional reiniciado"
            fi
        fi
    fi
    
    # Voltar para o usu√°rio original para continuar o restante do script
    voltar_para_usuario_original
    exit 0
fi

# Se estiver executando como usu√°rio ap√≥s downgrade, continuar a execu√ß√£o normal
if $CONTINUE_AS_USER; then
    log "üë§ Continuando execu√ß√£o como usu√°rio $ORIGINAL_USER"
    # Continuar a execu√ß√£o normal do script...
else
    # Verificar se n√£o foram passados par√¢metros
    if [ $# -eq 0 ]; then
        log "Nenhum par√¢metro foi informado. Utilizando configura√ß√£o padr√£o para atualiza√ß√£o completa"
        UPDATE_BACKEND=true
        UPDATE_FRONTEND=true
        UPDATE_NODE_MODULES=true
        RUN_MIGRATIONS=true
    fi

    # Parsing de par√¢metros
    while [[ $# -gt 0 ]]; do
        case $1 in
            -bd)
                UPDATE_BACKEND=true
                log "Par√¢metro -bd detectado: Backend ser√° atualizado"
                shift
                ;;
            -fd)
                UPDATE_FRONTEND=true
                log "Par√¢metro -fd detectado: Frontend ser√° atualizado"
                shift
                ;;
            -nm)
                UPDATE_NODE_MODULES=true
                log "Par√¢metro -nm detectado: node_modules ser√£o atualizados"
                shift
                ;;
            -sm)
                RUN_MIGRATIONS=true
                log "Par√¢metro -sm detectado: Migra√ß√µes Sequelize ser√£o executadas"
                shift
                ;;
            -f)
                FORCE_MODE=true
                UPDATE_BACKEND=true
                UPDATE_FRONTEND=true
                log "Par√¢metro -f detectado: Modo for√ßado ativado"
                shift
                ;;
            -bkp)
                BACKUP_MODE=true
                # Configurando para realizar atualiza√ß√£o completa com o par√¢metro -bkp
                UPDATE_BACKEND=true
                UPDATE_FRONTEND=true
                UPDATE_NODE_MODULES=true
                RUN_MIGRATIONS=true
                log "Par√¢metro -bkp detectado: Modo de backup ativado com atualiza√ß√£o completa"
                shift
                ;;
            -nk)
                KEEP_SRC=false
                log "Par√¢metro -nk detectado: Pastas src n√£o ser√£o mantidas"
                shift
                ;;
            -cr)
                CLEAN_REDIS=true
                log "Par√¢metro -cr detectado: Redis ser√° limpo"
                shift
                ;;
            -b|--branch)
                if [ -n "$2" ]; then
                    BRANCH="$2"
                    log "Par√¢metro -b/--branch detectado: Branch definida como: $BRANCH"
                    shift 2
                else
                    log "‚ùå Erro: Par√¢metro -b/--branch requer um valor."
                    exit 1
                fi
                ;;
            -h)
                show_help
                ;;
            --continue-as-root)
                # Ignorar este par√¢metro interno
                shift
                ;;
            --continue-as-user)
                # Ignorar este par√¢metro interno
                shift
                ;;
            *)
                log "‚ùå Op√ß√£o inv√°lida: $1"
                show_help
                ;;
        esac
    done

    log "üöÄ Iniciando processo de atualiza√ß√£o do AutoAtende"

    # Perguntar ao usu√°rio se deseja atualizar os pacotes do sistema operacional
    read -p "üîÑ Deseja atualizar os pacotes do sistema operacional? (s/N): " update_os_input
    if [[ "$update_os_input" =~ ^[Ss]$ ]]; then
        UPDATE_OS_PACKAGES=true
        log "Usu√°rio optou por atualizar os pacotes do sistema operacional"
    else
        log "Usu√°rio optou por n√£o atualizar os pacotes do sistema operacional"
    fi

    # Verificar a vers√£o do Node.js
    if ! verificar_node_version; then
        read -p "üîÑ A vers√£o do Node.js n√£o atende aos requisitos m√≠nimos. Deseja atualizar? (S/n): " update_node_input
        if [[ "$update_node_input" =~ ^[Nn]$ ]]; then
            log "Usu√°rio optou por n√£o atualizar o Node.js. Continuando com a vers√£o atual..."
        else
            log "Usu√°rio optou por atualizar o Node.js"
            export UPDATE_NODE=true
            alternar_para_root
        fi
    fi

    # Verificar e atualizar o Redis
    verificar_e_atualizar_redis

    # Verificar e instalar o ffmpeg (com confirma√ß√£o do usu√°rio)
    if ! comando_existe ffmpeg; then
        read -p "üîÑ O ffmpeg n√£o est√° instalado. Deseja instal√°-lo agora? (s/N): " install_ffmpeg_input
        if [[ "$install_ffmpeg_input" =~ ^[Ss]$ ]]; then
            log "Usu√°rio optou por instalar o ffmpeg"
            export INSTALL_FFMPEG=true
            alternar_para_root
        else
            log "Usu√°rio optou por n√£o instalar o ffmpeg. Continuando sem ffmpeg..."
        fi
    else
        log "‚úÖ ffmpeg j√° est√° instalado"
    fi

    # Atualizar pacotes do sistema operacional se solicitado
    if $UPDATE_OS_PACKAGES; then
        alternar_para_root
    fi

    # Perguntar ao usu√°rio se deseja limpar o Redis (se n√£o foi especificado por par√¢metro)
    if ! $CLEAN_REDIS; then
        read -p "üîÑ Deseja limpar o cache do Redis (recomendado para resolver problemas de inicializa√ß√£o)? (s/N): " clean_redis_input
        if [[ "$clean_redis_input" =~ ^[Ss]$ ]]; then
            CLEAN_REDIS=true
            log "Usu√°rio optou por limpar o cache do Redis"
        else
            log "Usu√°rio optou por n√£o limpar o cache do Redis"
        fi
    fi
    
    # Perguntar ao usu√°rio se deseja trocar a branch (se n√£o foi especificado por par√¢metro)
    if [ "$BRANCH" = "main" ]; then
        read -p "üîÑ Deseja usar outra branch que n√£o seja 'main'? (s/N): " change_branch_input
        if [[ "$change_branch_input" =~ ^[Ss]$ ]]; then
            read -p "üîÑ Digite o nome da branch que deseja utilizar: " branch_input
            if [ -n "$branch_input" ]; then
                BRANCH="$branch_input"
                log "Usu√°rio optou por usar a branch: $BRANCH"
            else
                log "Nome da branch vazio. Utilizando branch padr√£o: main"
            fi
        else
            log "Usu√°rio optou por usar a branch padr√£o: main"
        fi
    fi
fi

# Verificar consist√™ncia dos par√¢metros
if $RUN_MIGRATIONS && ! $UPDATE_BACKEND; then
    log "‚ùå Erro: -sm s√≥ funciona com -bd."
    exit 1
fi

# Configura√ß√£o inicial
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
NAME=${DIR##*/}
log "üìÇ Nome da pasta: $NAME"

# Verificar inst√¢ncia no PM2
HAS_BACKEND=$(pm2 list | grep "$NAME-backend")
if [ -z "$HAS_BACKEND" ]; then
    log "üí° Nenhuma inst√¢ncia backend encontrada no PM2. Usando nome padr√£o: $NAME."
else
    if [[ $NAME != *"-backend"* ]]; then
        NAME="$NAME-backend"
        log "üí° Inst√¢ncia backend detectada. Ajustando nome para: $NAME."
    fi
fi

# Verificar se a branch existe
log "üîç Verificando se a branch '$BRANCH' existe no reposit√≥rio..."
if ! git show-ref --verify --quiet refs/remotes/origin/$BRANCH; then
    log "‚ùå Branch '$BRANCH' n√£o existe no reposit√≥rio remoto!"
    read -p "üîÑ Deseja continuar com a branch 'main' em vez disso? (S/n): " use_main_branch
    if [[ "$use_main_branch" =~ ^[Nn]$ ]]; then
        log "‚ùå Atualiza√ß√£o cancelada pelo usu√°rio."
        exit 1
    else
        BRANCH="main"
        log "‚úÖ Branch ajustada para: $BRANCH"
    fi
fi

log "‚úÖ Branch definida como: $BRANCH"

# Backup do manifest.json
log "üìÇ Salvando manifest.json customizado..."
CUSTOM_MANIFEST_PATH="frontend/public/manifest.json"
TEMP_MANIFEST_PATH="/tmp/manifest.json"
if [ -f "$CUSTOM_MANIFEST_PATH" ]; then
    cp "$CUSTOM_MANIFEST_PATH" "$TEMP_MANIFEST_PATH"
    log "‚úÖ Arquivo manifest.json salvo temporariamente."
else
    log "‚ö†Ô∏è Nenhum manifest.json customizado encontrado para salvar."
fi

log "üîÑ Sincronizando reposit√≥rio com origin/$BRANCH..."
git fetch --all --prune
git checkout $BRANCH
git reset --hard origin/$BRANCH
git pull origin $BRANCH

# Limpeza de branches locais (mantendo apenas a branch selecionada e a main)
log "üßπ Removendo branches locais desnecess√°rias..."
git branch | grep -v " $BRANCH$" | grep -v " main$" | xargs -r git branch -D

# Restaura√ß√£o do manifest.json AP√ìS a sincroniza√ß√£o
log "üìÇ Restaurando manifest.json customizado..."
if [ -f "$TEMP_MANIFEST_PATH" ]; then
    cp "$TEMP_MANIFEST_PATH" "$CUSTOM_MANIFEST_PATH"
    log "‚úÖ Arquivo manifest.json customizado restaurado."
else
    log "‚ö†Ô∏è Nenhum arquivo manifest.json encontrado para restaurar."
fi

# Limpar Redis se solicitado
if $CLEAN_REDIS; then
    log "üîÑ Iniciando limpeza do Redis..."
    if clean_redis; then
        log "‚úÖ Limpeza do Redis conclu√≠da com sucesso"
    else
        log "‚ö†Ô∏è Houve problemas durante a limpeza do Redis"
        
        # Verificar se √© necess√°rio elevar privil√©gios para reiniciar o Redis
        read -p "üîÑ Deseja tentar reiniciar o Redis como root? (s/N): " restart_redis_input
        if [[ "$restart_redis_input" =~ ^[Ss]$ ]]; then
            # Obter o ID do container Redis, se existir
            REDIS_CONTAINER_ID=$(docker ps | grep redis | awk '{print $1}' | head -1)
            export REDIS_CONTAINER_ID
            export RESTART_REDIS_AS_ROOT=true
            alternar_para_root
        fi
    fi
fi

# Fun√ß√£o para realizar backup
perform_backup() {
    if $BACKUP_MODE; then
        TIMESTAMP=$(date +"%Y%m%d%H%M%S")
        BACKUP_DIR="backup_$TIMESTAMP"
        mkdir -p $BACKUP_DIR
        log "üì¶ Criando diret√≥rio de backup: $BACKUP_DIR"

        if $UPDATE_BACKEND && [ -d "backend/dist" ]; then
            log "üì¶ Realizando backup da pasta backend/dist..."
            tar -czf "$BACKUP_DIR/backend_dist_$TIMESTAMP.tar.gz" -C backend dist
            log "‚úÖ Backup do backend/dist conclu√≠do."
        else
            log "‚ö†Ô∏è Pasta backend/dist n√£o encontrada ou backend n√£o ser√° atualizado."
        fi

        if $UPDATE_FRONTEND && [ -d "frontend/build" ]; then
            log "üì¶ Realizando backup da pasta frontend/build..."
            tar -czf "$BACKUP_DIR/frontend_build_$TIMESTAMP.tar.gz" -C frontend build
            log "‚úÖ Backup do frontend/build conclu√≠do."
        else
            log "‚ö†Ô∏è Pasta frontend/build n√£o encontrada ou frontend n√£o ser√° atualizado."
        fi
    fi
}

# Realizar backup antes de atualizar
perform_backup

# Parar PM2
if $UPDATE_BACKEND; then
    log "üõë Parando inst√¢ncia PM2: $NAME..."
    pm2 stop $NAME
fi

# Atualiza√ß√£o do Backend
if $UPDATE_BACKEND; then
    cd backend || exit
    log "üìÇ Acessando a pasta 'backend'."

    if ! $FORCE_MODE && $UPDATE_NODE_MODULES; then
        log "üßπ Removendo node_modules e package-lock.json do backend..."
        rm -rf node_modules
        rm package-lock.json
        log "üì¶ Instalando depend√™ncias do backend..."
        npm install
        if [ $? -ne 0 ]; then
            log "‚ö†Ô∏è Alerta: Houve erros durante a instala√ß√£o das depend√™ncias do backend."
        else
            log "‚úÖ Depend√™ncias do backend instaladas com sucesso."
        fi
    else
        log "‚è≠Ô∏è Modo for√ßado: pulando atualiza√ß√£o de depend√™ncias do backend..."
    fi

    log "üèóÔ∏è Apagando a dist anterior..."
    rm -rf dist

    log "üèóÔ∏è Construindo aplica√ß√£o..."
    npm run build
    if [ $? -ne 0 ]; then
        log "‚ùå Erro durante o build do backend. Verifique os logs acima."
        exit 1
    else
        log "‚úÖ Build conclu√≠do com sucesso."
    fi

    log "üìÑ Copiando arquivo .env para a pasta dist..."
    cp .env dist/
    if [ $? -ne 0 ]; then
        log "‚ö†Ô∏è Erro ao copiar o arquivo .env. Verifique se o arquivo existe."
    else
        log "‚úÖ Arquivo .env copiado com sucesso."
    fi

    if ! $FORCE_MODE && $RUN_MIGRATIONS; then
        log "üìÇ Executando migra√ß√µes do Sequelize..."
        npx sequelize db:migrate
        if [ $? -ne 0 ]; then
            log "‚ö†Ô∏è Erro durante a execu√ß√£o das migra√ß√µes. Verifique os logs acima."
        else
            log "‚úÖ Migra√ß√µes aplicadas com sucesso."
        fi
        
        # Executar a configura√ß√£o das configura√ß√µes do banco de dados AP√ìS as migra√ß√µes
        log "‚öôÔ∏è Configurando configura√ß√µes do banco de dados..."
        if configure_database_settings; then
            log "‚úÖ Configura√ß√µes do banco de dados atualizadas com sucesso."
        else
            log "‚ö†Ô∏è Houve problemas ao configurar as configura√ß√µes do banco de dados."
        fi
    else
        log "‚è≠Ô∏è Modo for√ßado ou migra√ß√µes desativadas: pulando migra√ß√µes do Sequelize e configura√ß√£o do banco..."
    fi

    log "üöÄ Reiniciando aplica√ß√£o no PM2 com ambiente de produ√ß√£o..."
    NODE_ENV=production pm2 start $NAME --update-env --node-args="--max-old-space-size=8192"
    if [ $? -ne 0 ]; then
        log "‚ùå Erro ao reiniciar a aplica√ß√£o no PM2. Verifique os logs do PM2."
    else
        log "‚úÖ Aplica√ß√£o reiniciada com sucesso."
    fi

    if ! $KEEP_SRC; then
        log "üßπ Removendo arquivos 'src' para liberar espa√ßo..."
        rm -rf src
        log "‚úÖ Pastas 'src' removidas com sucesso."
    else
        log "üîí Mantendo pasta 'src' do backend conforme configura√ß√£o padr√£o..."
    fi

    cd ..
fi

# Atualiza√ß√£o do Frontend
if $UPDATE_FRONTEND; then
    cd frontend || exit
    log "üìÇ Acessando a pasta 'frontend'."

    if ! $FORCE_MODE && $UPDATE_NODE_MODULES; then
        log "üßπ Removendo node_modules e package-lock.json do frontend..."
        rm -rf node_modules
        rm package-lock.json
        log "üì¶ Instalando depend√™ncias do frontend..."
        npm install --legacy-peer-deps
        if [ $? -ne 0 ]; then
            log "‚ö†Ô∏è Alerta: Houve erros durante a instala√ß√£o das depend√™ncias do frontend."
        else
            log "‚úÖ Depend√™ncias do frontend instaladas com sucesso."
        fi
    else
        log "‚è≠Ô∏è Modo for√ßado: pulando atualiza√ß√£o de depend√™ncias do frontend..."
    fi

    log "üèóÔ∏è Apagando a build anterior..."
    rm -rf build

    log "üèóÔ∏è Construindo aplica√ß√£o frontend..."
    npm run build
    if [ $? -ne 0 ]; then
        log "‚ùå Erro durante o build do frontend. Verifique os logs acima."
        exit 1
    else
        log "‚úÖ Build do frontend conclu√≠do com sucesso."
    fi

    if ! $KEEP_SRC; then
        log "üßπ Removendo arquivos 'src' do frontend..."
        rm -rf src
        log "‚úÖ Pastas 'src' do frontend removidas com sucesso."
    else
        log "üîí Mantendo pasta 'src' do frontend conforme configura√ß√£o padr√£o..."
    fi

    cd ..
fi

# Limpeza de logs antigos do script
limpar_logs_antigos

log "üìä Resumo da atualiza√ß√£o:"
log "- Backend atualizado: $(if $UPDATE_BACKEND; then echo "Sim"; else echo "N√£o"; fi)"
log "- Frontend atualizado: $(if $UPDATE_FRONTEND; then echo "Sim"; else echo "N√£o"; fi)"
log "- Node modules atualizados: $(if $UPDATE_NODE_MODULES; then echo "Sim"; else echo "N√£o"; fi)"
log "- Migra√ß√µes executadas: $(if $RUN_MIGRATIONS; then echo "Sim"; else echo "N√£o"; fi)"
log "- Pasta src mantida: $(if $KEEP_SRC; then echo "Sim"; else echo "N√£o"; fi)"
log "- Branch utilizada: $BRANCH"
log "- Modo for√ßado: $(if $FORCE_MODE; then echo "Sim"; else echo "N√£o"; fi)"
log "- Backup realizado: $(if $BACKUP_MODE; then echo "Sim"; else echo "N√£o"; fi)"
log "- Pacotes do SO atualizados: $(if $UPDATE_OS_PACKAGES; then echo "Sim"; else echo "N√£o"; fi)"
log "- Redis atualizado: $(if [ $? -eq 0 ]; then echo "Sim"; else echo "N√£o"; fi)"
log "- Redis limpo: $(if $CLEAN_REDIS; then echo "Sim"; else echo "N√£o"; fi)"

log "üéâ Atualiza√ß√£o conclu√≠da com sucesso! Aproveite o AutoAtende! üöÄ"
log "üìú Log completo dispon√≠vel em: $LOG_FILE"